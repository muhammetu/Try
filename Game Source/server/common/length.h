#pragma once
#include "service.h"

#define WORD_MAX 0xffff

#define GOLD_MAX 1000000000000001LL
#define CHEQUE_MAX 2000000000

enum EMisc
{
	MAX_HOST_LENGTH					= 15,
	IP_ADDRESS_LENGTH				= 15,
	LOGIN_MAX_LEN					= 30,
	PASSWD_MAX_LEN					= 16,
	PLAYER_NAME_MAX					= 20,
	PLAYER_NAME_MIN					= 3,
#ifdef __PLAYER_PER_ACCOUNT_5__
	PLAYER_PER_ACCOUNT				= 5,
#else
	PLAYER_PER_ACCOUNT				= 4,
#endif
#ifdef USE_DISCORD_NETWORK
	DISCORD_ADDRESS_MAX_NUM						= 38, // (32 + 1 + 4 + [1])
#endif // USE_DISCORD_NETWORK
#ifdef __BAN_REASON_UTILITY__
	ACCOUNT_STATUS_MAX_LEN			= 24,
#else
	ACCOUNT_STATUS_MAX_LEN			= 8,
#endif
	CHARACTER_NAME_MAX_LEN			= 64,
#ifdef __MONIKER_SYSTEM__
	MONIKER_MAX_LEN					= 32,
#endif // __MONIKER_SYSTEM__
	SHOP_SIGN_MAX_LEN				= 32,
	INVENTORY_PAGE_COLUMN			= 5, // 5 (default)
	INVENTORY_PAGE_ROW				= 9, // 9 (default)
	INVENTORY_PAGE_SIZE				= INVENTORY_PAGE_COLUMN*INVENTORY_PAGE_ROW,
	INVENTORY_PAGE_COUNT			= 4, // 2 (default)
	INVENTORY_MAX_NUM				= INVENTORY_PAGE_SIZE*INVENTORY_PAGE_COUNT, // 90 (default)
	EMPIRE_MAX_NUM					= 4,
	SOCIAL_ID_MAX_LEN				= 18,
	GUILD_NAME_MAX_LEN				= 12,
	SHOP_HOST_ITEM_MAX_NUM			= 45, // 45 (default)
	CHAT_MAX_LEN					= 512,
	QUICKSLOT_MAX_NUM				= 36,
	QUERY_MAX_LEN					= 8192,
	PLAYER_EXP_TABLE_MAX			= 200,
	PLAYER_MAX_LEVEL_CONST			= 250,
	GUILD_MAX_LEVEL					= 40,
	MOB_MAX_LEVEL					= 100,
	ATTRIBUTE_MAX_VALUE				= 20,
	SKILL_MAX_NUM					= 255,
	SKILLBOOK_DELAY_MIN				= 64800,
	SKILLBOOK_DELAY_MAX				= 108000,
#ifdef __SAGE_SKILL__
#ifdef __EXPERT_SKILL__
	SKILL_MAX_LEVEL					= 60+10+10,
#else
	SKILL_MAX_LEVEL					= 50,
#endif
#else
	SKILL_MAX_LEVEL					= 40,
#endif
	APPLY_NAME_MAX_LEN				= 32,
	EVENT_FLAG_NAME_MAX_LEN 		= 32,
	MOB_SKILL_MAX_NUM				= 5,
    POINT_MAX_NUM					= 255,
	DRAGON_SOUL_BOX_SIZE			= 32,
	DRAGON_SOUL_BOX_COLUMN_NUM		= 8,
	DRAGON_SOUL_BOX_ROW_NUM			= DRAGON_SOUL_BOX_SIZE / DRAGON_SOUL_BOX_COLUMN_NUM,
	DRAGON_SOUL_REFINE_GRID_SIZE	= 15,
	MAX_AMOUNT_OF_MALL_BONUS		= 20,
	WEAR_MAX_NUM					= 55,
	SHOP_TAB_NAME_MAX				= 32,
	SHOP_TAB_COUNT_MAX				= 3,
	BELT_INVENTORY_SLOT_WIDTH		= 4,
	BELT_INVENTORY_SLOT_HEIGHT		= 4,
	BELT_INVENTORY_SLOT_COUNT		= BELT_INVENTORY_SLOT_WIDTH * BELT_INVENTORY_SLOT_HEIGHT,
	SAFEBOX_MAX_NUM					= 135,
	SAFEBOX_PASSWORD_MAX_LEN		= 6,
#ifdef __OFFLINE_SHOP__
	OFFLINE_SHOP_NAME_MAX_LEN			= 64 + 1,
	OFFLINESHOP_DURATION_MAX_MINUTES	= 3 * 24 * 60,
	OFFLINESHOP_MAX_SEARCH_RESULT		= 1500,
	OFFLINESHOP_SECONDS_PER_SEARCH		= 5,
	OFFLINESHOP_MAX_ITEM_COUNT			= 90,
#endif
#ifdef __ADDITIONAL_INVENTORY__
	SPECIAL_INVENTORY_PAGE_COUNT 		= 5,
	SPECIAL_INVENTORY_PAGE_SIZE 		= 45,
	SPECIAL_INVENTORY_MAX_NUM 			= SPECIAL_INVENTORY_PAGE_SIZE * SPECIAL_INVENTORY_PAGE_COUNT,
#endif
#ifdef __HWID_SECURITY_UTILITY__
	CPU_ID_MAX_LEN 						= 96,
	HDD_MODEL_MAX_LEN 					= 96,
	MACHINE_GUID_MAX_LEN 				= 96,
	MAC_ADDR_MAX_LEN 					= 96,
	HDD_SERIAL_MAX_LEN 					= 96,
	BIOS_ID_MAX_LEN						= 96,
	PC_NAME_MAX_NUM						= 96,
	USER_NAME_MAX_NUM					= 96,
	OS_VERSION_MAX_NUM					= 96,
#endif
#ifdef __BAN_REASON_UTILITY__
	BAN_WEB_LINK_MAX_LEN 				= 128,
#endif
#ifdef __FAST_CHEQUE_TRANSFER__
	TAX_MUL = 3,
#endif
};

#ifdef __FAST_CHEQUE_TRANSFER__
	#define CHEQUE_NAME_VALUE 1000000000
#endif

#ifdef __CHEQUE_SYSTEM__
	#define YANG_PER_CHEQUE 1000000000
#endif

#ifdef __ITEM_CHANGELOOK__
enum EChangeLookInfo
{
	CL_WINDOW_MAX_MATERIALS 	= 3,
	CL_CLEAN_ATTR_VALUE0 		= 8,
	CL_TRANSMUTATION_PRICE		= 10000000,
	CL_SCROLL_VNUM				= 72326,
};
#endif

#ifdef __SWITCHBOT__
enum SwitchbotValues
{
	SWITCHBOT_SLOT_COUNT = 5,
	SWITCHBOT_ALTERNATIVE_COUNT = 2,
	//1 = Switching Item
	//2 = Yang
	SWITCHBOT_PRICE_TYPE = 1,
	//Amount Swtichting Items the Yang-Price
	SWITCHBOT_PRICE_AMOUNT = 1,
};

const DWORD c_arSwitchingItems[1] =
{
	71084,
};
#endif

enum EWearPositions
{
	WEAR_BODY,		// 0 zirh
	WEAR_HEAD,		// 1 kask
	WEAR_FOOTS,		// 2 ayakkabi
	WEAR_WRIST,		// 3 bilezik
	WEAR_WEAPON,	// 4 silah
	WEAR_NECK,		// 5 kolye
	WEAR_EAR,		// 6 kupe
	WEAR_UNIQUE1,	// 7
	WEAR_UNIQUE2,	// 8
	WEAR_ARROW,		// 9 ok
	WEAR_SHIELD,	// 10 kalkan
    WEAR_ABILITY1,  // 11
    WEAR_ABILITY2,  // 12
    WEAR_ABILITY3,  // 13
    WEAR_ABILITY4,  // 14
    WEAR_ABILITY5,  // 15
    WEAR_ABILITY6,  // 16
    WEAR_ABILITY7,  // 17
    WEAR_ABILITY8,  // 18
	WEAR_COSTUME_BODY,	// 19
	WEAR_COSTUME_HAIR,	// 20
	WEAR_COSTUME_MOUNT,// 21
	WEAR_COSTUME_ACCE,// 22
	WEAR_COSTUME_WEAPON,// 23
#ifdef __AURA_COSTUME_SYSTEM__
	WEAR_COSTUME_AURA,// 24
#endif
	WEAR_RING1,// 25
	WEAR_RING2,// 26
	WEAR_BELT,// 27
	WEAR_PENDANT,// 28
#ifdef __SHINING_ITEM_SYSTEM__
	WEAR_SHINING_WEAPON,
	WEAR_SHINING_ARMOR,
	WEAR_SHINING_SPECIAL,
	WEAR_SHINING_SPECIAL2,
	WEAR_SHINING_SPECIAL3,
	WEAR_SHINING_WING,
#endif
#ifdef __CAKRA_ITEM_SYSTEM__
	WEAR_CAKRA_1,
	WEAR_CAKRA_2,
	WEAR_CAKRA_3,
	WEAR_CAKRA_4,
	WEAR_CAKRA_5,
	WEAR_CAKRA_6,
	WEAR_CAKRA_7,
	WEAR_CAKRA_8,
#endif
#ifdef __PET_SYSTEM_PROTO__
	WEAR_PET,
#endif
#ifdef __SEBNEM_ITEM_SYSTEM__
	WEAR_SEBNEM_1,
	WEAR_SEBNEM_2,
	WEAR_SEBNEM_3,
	WEAR_SEBNEM_4,
	WEAR_SEBNEM_5,
	WEAR_SEBNEM_6,
#endif
	WEAR_MAX = 55,
};

enum EDragonSoulDeckType
{
	DRAGON_SOUL_DECK_0,
	DRAGON_SOUL_DECK_1,
	DRAGON_SOUL_DECK_MAX_NUM = 2,
	DRAGON_SOUL_DECK_RESERVED_MAX_NUM = 3,
};

enum ESex
{
	SEX_MALE,
	SEX_FEMALE
};

enum EDirection
{
	DIR_NORTH,
	DIR_NORTHEAST,
	DIR_EAST,
	DIR_SOUTHEAST,
	DIR_SOUTH,
	DIR_SOUTHWEST,
	DIR_WEST,
	DIR_NORTHWEST,
	DIR_MAX_NUM
};

enum EJobs
{
	JOB_WARRIOR,
	JOB_ASSASSIN,
	JOB_SURA,
	JOB_SHAMAN,
#ifdef __WOLFMAN_CHARACTER__
	JOB_WOLFMAN,
#endif
	JOB_MAX_NUM
};

enum ESkillGroups
{
	SKILL_GROUP_MAX_NUM = 2,
};

enum ERaceFlags
{
	RACE_FLAG_ANIMAL	= (1 << 0),
	RACE_FLAG_UNDEAD	= (1 << 1),
	RACE_FLAG_DEVIL		= (1 << 2),
	RACE_FLAG_HUMAN		= (1 << 3),
	RACE_FLAG_ORC		= (1 << 4),
	RACE_FLAG_MILGYO	= (1 << 5),
	RACE_FLAG_INSECT	= (1 << 6),
	RACE_FLAG_FIRE		= (1 << 7),
	RACE_FLAG_ICE		= (1 << 8),
	RACE_FLAG_DESERT	= (1 << 9),
	RACE_FLAG_TREE		= (1 << 10),
	RACE_FLAG_ATT_ELEC	= (1 << 11),
	RACE_FLAG_ATT_FIRE	= (1 << 12),
	RACE_FLAG_ATT_ICE	= (1 << 13),
	RACE_FLAG_ATT_WIND	= (1 << 14),
	RACE_FLAG_ATT_EARTH	= (1 << 15),
	RACE_FLAG_ATT_DARK	= (1 << 16),
	RACE_FLAG_BOSS		= (1 << 17),
	RACE_FLAG_PET		= (1 << 18),
	RACE_FLAG_MOUNT		= (1 << 19),
};

enum QuickSlotTypes
{
	QUICKSLOT_TYPE_NONE,
	QUICKSLOT_TYPE_ITEM,
	QUICKSLOT_TYPE_SKILL,
	QUICKSLOT_TYPE_COMMAND,
	QUICKSLOT_TYPE_MAX_NUM,
};

enum EParts
{
	PART_MAIN,
	PART_WEAPON,
	PART_HEAD,
	PART_HAIR,

#ifdef __ACCE_SYSTEM__
	PART_ACCE,
#endif
#ifdef __AURA_COSTUME_SYSTEM__
	PART_AURA,
#endif
	PART_MAX_NUM,
	PART_WEAPON_SUB,
};

enum EChatType
{
	CHAT_TYPE_TALKING,
	CHAT_TYPE_INFO,
	CHAT_TYPE_NOTICE,
	CHAT_TYPE_PARTY,
	CHAT_TYPE_GUILD,
	CHAT_TYPE_COMMAND,
	CHAT_TYPE_SHOUT,
	CHAT_TYPE_WHISPER,
	CHAT_TYPE_BIG_NOTICE,
#ifdef __DICE_SYSTEM__
	CHAT_TYPE_DICE_INFO, //11
#endif
#ifdef __CHAT_FILTER__
	CHAT_TYPE_NOTICE_IMPROVING,
#endif
#ifdef __SCP1453_EXTENSIONS__
	CHAT_TYPE_DUNGEON_MISSION,
	CHAT_TYPE_DUNGEON_SUBMISSION,
#endif
	CHAT_TYPE_MAX_NUM
};

enum EWhisperType
{
	WHISPER_TYPE_NORMAL			= 0,
	WHISPER_TYPE_NOT_EXIST		= 1,
	WHISPER_TYPE_TARGET_BLOCKED	= 2,
	WHISPER_TYPE_SENDER_BLOCKED	= 3,
	WHISPER_TYPE_ERROR			= 4,
	WHISPER_TYPE_GM				= 5,
	WHISPER_TYPE_SYSTEM			= 0xFF
};

enum ECharacterPosition
{
	POSITION_GENERAL,
	POSITION_BATTLE,
	POSITION_DYING,
	POSITION_SITTING_CHAIR,
	POSITION_SITTING_GROUND,
	POSITION_INTRO,
	POSITION_MAX_NUM
};

#ifdef __GAME_MASTER_UTILITY__
enum EGMLevels
{
	GM_PLAYER,
	GM_HUNTER,
	GM_MOD,
	GM_SMOD,
	GM_DCADMIN,
	GM_DEFAULT,
	GM_IMPLEMENTOR,
	GM_DISABLE,
};

enum EGMAction
{
	ACTION_NONE,
	ACTION_EXCHANGE,
	ACTION_SHOP,
	ACTION_SAFEBOX,
	ACTION_RISKLY_SET,
#ifdef __OFFLINE_SHOP__
	ACTION_OFFLINE_SHOP,
#endif
};
#else
enum EGMLevels
{
	GM_PLAYER,
	GM_LOW_WIZARD,
	GM_WIZARD,
	GM_HIGH_WIZARD,
	GM_GOD,
	GM_IMPLEMENTOR,
	GM_DISABLE,
};
#endif

enum EMobRank
{
	MOB_RANK_PAWN,
	MOB_RANK_S_PAWN,
	MOB_RANK_KNIGHT,
	MOB_RANK_S_KNIGHT,
	MOB_RANK_BOSS,
	MOB_RANK_KING,
	MOB_RANK_MAX_NUM
};

enum ECharType
{
	CHAR_TYPE_MONSTER,
	CHAR_TYPE_NPC,
	CHAR_TYPE_STONE,
	CHAR_TYPE_WARP,
	CHAR_TYPE_DOOR,
	CHAR_TYPE_PC,
	CHAR_TYPE_POLYMORPH_PC,
	CHAR_TYPE_HORSE,
	CHAR_TYPE_GOTO,
};

enum EBattleType
{
	BATTLE_TYPE_MELEE,
	BATTLE_TYPE_RANGE,
	BATTLE_TYPE_MAGIC,
	BATTLE_TYPE_SPECIAL,
	BATTLE_TYPE_POWER,
	BATTLE_TYPE_TANKER,
	BATTLE_TYPE_SUPER_POWER,
	BATTLE_TYPE_SUPER_TANKER,
	BATTLE_TYPE_MAX_NUM
};

enum EApplyTypes
{
	APPLY_NONE,			// 0
	APPLY_MAX_HP,		// 1
	APPLY_MAX_SP,		// 2
	APPLY_CON,			// 3
	APPLY_INT,			// 4
	APPLY_STR,			// 5
	APPLY_DEX,			// 6
	APPLY_ATT_SPEED,	// 7
	APPLY_MOV_SPEED,	// 8
	APPLY_CAST_SPEED,	// 9
	APPLY_HP_REGEN,		// 10
	APPLY_SP_REGEN,		// 11
	APPLY_POISON_PCT,	// 12
	APPLY_STUN_PCT,		// 13
	APPLY_SLOW_PCT,		// 14
	APPLY_CRITICAL_PCT,		// 15
	APPLY_PENETRATE_PCT,	// 16
	APPLY_ATTBONUS_HUMAN,	// 17
	APPLY_ATTBONUS_ANIMAL,	// 18
	APPLY_ATTBONUS_ORC,		// 19
	APPLY_ATTBONUS_MILGYO,	// 20
	APPLY_ATTBONUS_UNDEAD,	// 21
	APPLY_ATTBONUS_DEVIL,	// 22
	APPLY_STEAL_HP,			// 23
	APPLY_STEAL_SP,			// 24
	APPLY_MANA_BURN_PCT,	// 25
	APPLY_DAMAGE_SP_RECOVER,	// 26
	APPLY_BLOCK,			// 27
	APPLY_DODGE,			// 28
	APPLY_RESIST_SWORD,		// 29
	APPLY_RESIST_TWOHAND,	// 30
	APPLY_RESIST_DAGGER,	// 31
	APPLY_RESIST_BELL,		// 32
	APPLY_RESIST_FAN,		// 33
	APPLY_RESIST_BOW,		// 34
	APPLY_RESIST_FIRE,		// 35
	APPLY_RESIST_ELEC,		// 36
	APPLY_RESIST_MAGIC,		// 37
	APPLY_RESIST_WIND,		// 38
	APPLY_REFLECT_MELEE,	// 39
	APPLY_REFLECT_CURSE,	// 40
	APPLY_POISON_REDUCE,	// 41
	APPLY_KILL_SP_RECOVER,	// 42
	APPLY_EXP_DOUBLE_BONUS,	// 43
	APPLY_GOLD_DOUBLE_BONUS,	// 44
	APPLY_ITEM_DROP_BONUS,	// 45
	APPLY_POTION_BONUS,		// 46
	APPLY_KILL_HP_RECOVER,	// 47
	APPLY_IMMUNE_STUN,		// 48
	APPLY_IMMUNE_SLOW,		// 49
	APPLY_IMMUNE_FALL,		// 50
	APPLY_SKILL,			// 51
	APPLY_BOW_DISTANCE,		// 52
	APPLY_ATT_GRADE_BONUS,	// 53
	APPLY_DEF_GRADE_BONUS,	// 54
	APPLY_MAGIC_ATT_GRADE,	// 55
	APPLY_MAGIC_DEF_GRADE,	// 56
	APPLY_CURSE_PCT,		// 57
	APPLY_MAX_STAMINA,		// 58
	APPLY_ATTBONUS_WARRIOR,	// 59
	APPLY_ATTBONUS_ASSASSIN,	// 60
	APPLY_ATTBONUS_SURA,	// 61
	APPLY_ATTBONUS_SHAMAN,	// 62
	APPLY_ATTBONUS_MONSTER,	// 63
	APPLY_MALL_ATTBONUS,
	APPLY_MALL_DEFBONUS,
	APPLY_MALL_EXPBONUS,
	APPLY_MALL_ITEMBONUS,
	APPLY_MALL_GOLDBONUS,
	APPLY_MAX_HP_PCT,
	APPLY_MAX_SP_PCT,
	APPLY_SKILL_DAMAGE_BONUS,
	APPLY_NORMAL_HIT_DAMAGE_BONUS,
	APPLY_SKILL_DEFEND_BONUS,
	APPLY_NORMAL_HIT_DEFEND_BONUS,
	APPLY_UNUSED_EXP_BONUS,
	APPLY_UNUSED_DROP_BONUS,
	APPLY_EXTRACT_HP_PCT,
	APPLY_RESIST_WARRIOR,
	APPLY_RESIST_ASSASSIN,
	APPLY_RESIST_SURA,
	APPLY_RESIST_SHAMAN,
	APPLY_ENERGY,
	APPLY_DEF_GRADE,
	APPLY_COSTUME_ATTR_BONUS,
	APPLY_MAGIC_ATTBONUS_PER,
	APPLY_MELEE_MAGIC_ATTBONUS_PER,
	APPLY_RESIST_ICE,
	APPLY_RESIST_EARTH,
	APPLY_RESIST_DARK,
	APPLY_ANTI_CRITICAL_PCT,
	APPLY_ANTI_PENETRATE_PCT,
#ifdef __WOLFMAN_CHARACTER__
	APPLY_BLEEDING_REDUCE			= 92,		//92
	APPLY_BLEEDING_PCT				= 93,		//93
	APPLY_ATTBONUS_WOLFMAN			= 94,
	APPLY_RESIST_WOLFMAN			= 95,
	APPLY_RESIST_CLAW				= 96,
#endif
#ifdef __ACCE_SYSTEM__
	APPLY_ACCEDRAIN_RATE			= 97,			//97
#endif
#ifdef __MAGIC_REDUCTION_SYSTEM__
	APPLY_RESIST_MAGIC_REDUCTION	= 98,	//98
#endif
	APPLY_MOUNT = 99,
	APPLY_ENCHANT_FIRE = 100,
	APPLY_ENCHANT_ICE = 101,
	APPLY_ENCHANT_EARTH = 102,
	APPLY_ENCHANT_DARK = 103,
	APPLY_ENCHANT_WIND = 104,
	APPLY_ENCHANT_ELECT = 105,
	APPLY_RESIST_HUMAN = 106,
	APPLY_ATTBONUS_SWORD = 107,
	APPLY_ATTBONUS_TWOHAND = 108,
	APPLY_ATTBONUS_DAGGER = 109,
	APPLY_ATTBONUS_BELL = 110,
	APPLY_ATTBONUS_FAN = 111,
	APPLY_ATTBONUS_BOW = 112,
	APPLY_ATTBONUS_CLAW = 113,
	APPLY_ATTBONUS_CZ = 114,
	APPLY_ATTBONUS_DESERT = 115,
	APPLY_ATTBONUS_INSECT = 116,
#ifdef __ATTRIBUTES_TYPES__
	APPLY_ATTBONUS_STONE = 117,
	APPLY_ATTBONUS_BOSS = 118,
	APPLY_ATTBONUS_ELEMENTS = 119,
	APPLY_ENCHANT_ELEMENTS = 120,
	APPLY_ATTBONUS_CHARACTERS = 121,
	APPLY_ENCHANT_CHARACTERS = 122,
#endif
#ifdef __CHEST_DROP_POINT__
	APPLY_CHEST_BONUS = 123,
#endif
	MAX_APPLY_NUM,
};

enum EOnClickEvents
{
	ON_CLICK_NONE,
	ON_CLICK_SHOP,
	ON_CLICK_TALK,
	ON_CLICK_MAX_NUM
};

enum EOnIdleEvents
{
	ON_IDLE_NONE,
	ON_IDLE_GENERAL,
	ON_IDLE_MAX_NUM
};

enum EWindows
{
	RESERVED_WINDOW,
	INVENTORY,
	EQUIPMENT,
	SAFEBOX,
	MALL,
	DRAGON_SOUL_INVENTORY,
#ifdef __ADDITIONAL_INVENTORY__
	UPGRADE_INVENTORY,
	BOOK_INVENTORY,
	STONE_INVENTORY,
	FLOWER_INVENTORY,
	ATTR_INVENTORY,
	CHEST_INVENTORY,
#endif
#ifdef __SWITCHBOT__
	SWITCHBOT,
#endif
	BELT_INVENTORY,
	GROUND,
#ifdef __OFFLINE_SHOP__
	NEW_OFFSHOP,
	SHOP_SAFEBOX,
#endif
};

enum EMobSizes
{
	MOBSIZE_RESERVED,
	MOBSIZE_SMALL,
	MOBSIZE_MEDIUM,
	MOBSIZE_BIG
};

enum EAIFlags
{
	AIFLAG_AGGRESSIVE	= (1 << 0),
	AIFLAG_NOMOVE	= (1 << 1),
	AIFLAG_COWARD	= (1 << 2),
	AIFLAG_NOATTACKSHINSU	= (1 << 3),
	AIFLAG_NOATTACKJINNO	= (1 << 4),
	AIFLAG_NOATTACKCHUNJO	= (1 << 5),
	AIFLAG_ATTACKMOB = (1 << 6 ),
	AIFLAG_BERSERK	= (1 << 7),
	AIFLAG_STONESKIN	= (1 << 8),
	AIFLAG_GODSPEED	= (1 << 9),
	AIFLAG_DEATHBLOW	= (1 << 10),
	AIFLAG_REVIVE		= (1 << 11),
	AIFLAG_REFLECT = (1 << 12),
	AIFLAG_FALL = (1 << 13),
	AIFLAG_RATTSPEED = (1 << 14),
	AIFLAG_VIT = (1 << 15),
	AIFLAG_TIMEVIT = (1 << 16),
	AIFLAG_RCASTSPEED = (1 << 17),
	AIFLAG_COUNT = (1 << 18),
	AIFLAG_NORECOVERY = (1 << 19),
	AIFLAG_HEALER = (1 << 20),
};

enum EMobStatType
{
	MOB_STATTYPE_POWER,
	MOB_STATTYPE_TANKER,
	MOB_STATTYPE_SUPER_POWER,
	MOB_STATTYPE_SUPER_TANKER,
	MOB_STATTYPE_RANGE,
	MOB_STATTYPE_MAGIC,
	MOB_STATTYPE_MAX_NUM
};

enum EImmuneFlags
{
	IMMUNE_STUN		= (1 << 0),
	IMMUNE_SLOW		= (1 << 1),
	IMMUNE_FALL		= (1 << 2),
	IMMUNE_CURSE	= (1 << 3),
	IMMUNE_POISON	= (1 << 4),
	IMMUNE_TERROR	= (1 << 5),
	IMMUNE_REFLECT	= (1 << 6),
};

enum EMobEnchants
{
	MOB_ENCHANT_CURSE,
	MOB_ENCHANT_SLOW,
	MOB_ENCHANT_POISON,
	MOB_ENCHANT_STUN,
	MOB_ENCHANT_CRITICAL,
	MOB_ENCHANT_PENETRATE,
	MOB_ENCHANTS_MAX_NUM
};

enum EMobResists
{
	MOB_RESIST_SWORD,
	MOB_RESIST_TWOHAND,
	MOB_RESIST_DAGGER,
	MOB_RESIST_BELL,
	MOB_RESIST_FAN,
	MOB_RESIST_BOW,
	MOB_RESIST_FIRE,
	MOB_RESIST_ELECT,
	MOB_RESIST_MAGIC,
	MOB_RESIST_WIND,
	MOB_RESIST_POISON,
	MOB_RESISTS_MAX_NUM
};

enum SkillAttrType
{
	SKILL_ATTR_TYPE_NORMAL = 1,
	SKILL_ATTR_TYPE_MELEE,
	SKILL_ATTR_TYPE_RANGE,
	SKILL_ATTR_TYPE_MAGIC
};

enum SkillType
{
	SKILL_NORMAL,
	SKILL_MASTER,
	SKILL_GRAND_MASTER,
	SKILL_PERFECT_MASTER,
#ifdef __SAGE_SKILL__
	SKILL_SAGE_MASTER,
#endif
#ifdef __EXPERT_SKILL__
	SKILL_EXPERT_MASTER,
	SKILL_DESTANSI_MASTER,
	SKILL_TANRISAL_MASTER,
#endif
};

enum EGuildWarType
{
	GUILD_WAR_TYPE_FIELD,
	GUILD_WAR_TYPE_BATTLE,
	GUILD_WAR_TYPE_FLAG,
	GUILD_WAR_TYPE_MAX_NUM
};

enum EGuildWarState
{
	GUILD_WAR_NONE,
	GUILD_WAR_SEND_DECLARE,
	GUILD_WAR_REFUSE,
	GUILD_WAR_RECV_DECLARE,
	GUILD_WAR_WAIT_START,
	GUILD_WAR_CANCEL,
	GUILD_WAR_ON_WAR,
	GUILD_WAR_END,
	GUILD_WAR_OVER,
	GUILD_WAR_DURATION = 30*60,
	GUILD_WAR_WIN_POINT = 1000,
	GUILD_WAR_LADDER_HALF_PENALTY_TIME = 12*60*60,
};

enum EAttributeSet
{
	ATTRIBUTE_SET_WEAPON,
	ATTRIBUTE_SET_BODY,
	ATTRIBUTE_SET_WRIST,
	ATTRIBUTE_SET_FOOTS,
	ATTRIBUTE_SET_NECK,
	ATTRIBUTE_SET_HEAD,
	ATTRIBUTE_SET_SHIELD,
	ATTRIBUTE_SET_EAR,
#ifdef __ITEM_ATTR_COSTUME__
	ATTRIBUTE_SET_COSTUME_BODY,
	ATTRIBUTE_SET_COSTUME_HAIR,
#if defined(__ITEM_ATTR_COSTUME__) && defined(__WEAPON_COSTUME_SYSTEM__)
	ATTRIBUTE_SET_COSTUME_WEAPON,
#endif
#endif
#ifdef __PENDANT_SYSTEM__
	ATTRIBUTE_SET_PENDANT,
#endif
#ifdef __AURA_COSTUME_SYSTEM__
	ATTRIBUTE_SET_COSTUME_AURA,
#endif
#ifdef __MOUNT_COSTUME_SYSTEM__
	ATTRIBUTE_SET_COSTUME_MOUNT,
#endif
#ifdef __MARTY_BELT_INVENTORY__
	ATTRIBUTE_SET_BELT,
#endif
#ifdef __SHINING_ITEM_SYSTEM__
	ATTRIBUTE_SET_ACCE_SHINING,
	ATTRIBUTE_SET_SOUL_SHINING,
#endif
#ifdef __CAKRA_ITEM_SYSTEM__
	ATTRIBUTE_SET_CAKRA,
#endif
#ifdef __PET_SYSTEM_PROTO__
	ATTRIBUTE_SET_PET,
#endif
#ifdef __SEBNEM_ITEM_SYSTEM__
	ATTRIBUTE_SET_SEBNEM,
#endif
	ATTRIBUTE_SET_MAX_NUM
};

enum EPrivType
{
	PRIV_NONE,
	PRIV_ITEM_DROP,
	PRIV_GOLD_DROP,
	PRIV_GOLD10_DROP,
	PRIV_EXP_PCT,
	MAX_PRIV_NUM,
};

enum EPremiumTypes
{
	PREMIUM_EXP,
	PREMIUM_ITEM,
	PREMIUM_SAFEBOX,
	PREMIUM_AUTOLOOT,
	PREMIUM_FISH_MIND,
	PREMIUM_GOLD,
	PREMIUM_MAX_NUM = 7
};

enum SPECIAL_EFFECT
{
	SE_NONE,
	SE_HPUP_RED,
	SE_SPUP_BLUE,
	SE_SPEEDUP_GREEN,
	SE_DXUP_PURPLE,
	SE_CRITICAL,
	SE_PENETRATE,
	SE_BLOCK,
	SE_DODGE,
	SE_CHINA_FIREWORK,
	SE_SPIN_TOP,
	SE_SUCCESS,
	SE_FAIL,
	SE_FR_SUCCESS,
	SE_PERCENT_DAMAGE1,
	SE_PERCENT_DAMAGE2,
	SE_PERCENT_DAMAGE3,
	SE_AUTO_HPUP,
	SE_AUTO_SPUP,
	SE_EQUIP_RAMADAN_RING,
	SE_EQUIP_HALLOWEEN_CANDY,
	SE_EQUIP_HAPPINESS_RING,
	SE_EQUIP_LOVE_PENDANT,
#ifdef __ACCE_SYSTEM__
	SE_EFFECT_ACCE_SUCCEDED,
	SE_EFFECT_ACCE_EQUIP,
#endif
#ifdef __PVP_EFFECT__
	SE_PVP_WIN,
	SE_PVP_OPEN1,
	SE_PVP_OPEN2,
	SE_PVP_BEGIN1,
	SE_PVP_BEGIN2,
#endif
#ifdef __SMITH_EFFECT__
	SE_FR_FAIL,
#endif
#ifdef __AGGR_MONSTER_EFFECT__
	SE_AGGREGATE_MONSTER_EFFECT,
#endif
};

#include "item_length.h"

enum EDragonSoulRefineWindowSize
{
	DRAGON_SOUL_REFINE_GRID_MAX = 15,
};

enum EMisc2
{
	DRAGON_SOUL_EQUIP_SLOT_START = INVENTORY_MAX_NUM + WEAR_MAX_NUM,
	DRAGON_SOUL_EQUIP_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_START + (DS_SLOT_MAX * DRAGON_SOUL_DECK_MAX_NUM),
	DRAGON_SOUL_EQUIP_RESERVED_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_END + (DS_SLOT_MAX * DRAGON_SOUL_DECK_RESERVED_MAX_NUM),

	BELT_INVENTORY_SLOT_START = DRAGON_SOUL_EQUIP_RESERVED_SLOT_END,
	BELT_INVENTORY_SLOT_END = BELT_INVENTORY_SLOT_START + BELT_INVENTORY_SLOT_COUNT,

	INVENTORY_AND_EQUIP_SLOT_MAX = BELT_INVENTORY_SLOT_END,
};

#pragma pack(push, 1)

#ifdef __REFINE_MSG_REWORK__
enum ERefineFailType
{
	REFINE_FAIL_GRADE_DOWN,
	REFINE_FAIL_DEL_ITEM,
	REFINE_FAIL_KEEP_GRADE,
	REFINE_FAIL_MAX,
};
#endif

typedef struct SItemPos
{
	BYTE window_type;
	WORD cell;
    SItemPos ()
    {
        window_type = INVENTORY;
		cell = WORD_MAX;
    }

	SItemPos (BYTE _window_type, WORD _cell)
    {
        window_type = _window_type;
        cell = _cell;
    }

	bool IsValidItemPosition() const
	{
		switch (window_type)
		{
		case RESERVED_WINDOW:
			return false;
		case INVENTORY:
		case EQUIPMENT:
		case BELT_INVENTORY:
			return cell < INVENTORY_AND_EQUIP_SLOT_MAX;
		case DRAGON_SOUL_INVENTORY:
			return cell < (DRAGON_SOUL_INVENTORY_MAX_NUM);
#ifdef __ADDITIONAL_INVENTORY__
		case UPGRADE_INVENTORY:
		case BOOK_INVENTORY:
		case STONE_INVENTORY:
		case FLOWER_INVENTORY:
		case ATTR_INVENTORY:
		case CHEST_INVENTORY:
			return cell < (SPECIAL_INVENTORY_MAX_NUM);
#endif
		case SAFEBOX:
		case MALL:
			return false;

#ifdef __SWITCHBOT__
		case SWITCHBOT:
			return cell < SWITCHBOT_SLOT_COUNT;
#endif

		default:
			return false;
		}
		return false;
	}

	// @duzenleme
	// simyanin pozisyonlari ile alakali bir fix zamaninda rahmetli Hasan Fidan vermisti.
	// her oyunda kullandim + piyasadaki tum sourcelerde artik sayemde bu fix mevcut.
	bool IsEquipPosition() const
	{
		return (IsDefaultInventoryEquipPosition() || IsDragonSoulEquipPosition());
	}
	bool IsDefaultInventoryEquipPosition() const
	{
		return ((INVENTORY == window_type || EQUIPMENT == window_type) && (cell >= INVENTORY_MAX_NUM && cell < (INVENTORY_MAX_NUM + WEAR_MAX_NUM)));
	}
	bool IsDragonSoulEquipPosition() const
	{
		return ((INVENTORY == window_type || EQUIPMENT == window_type) && (cell >= DRAGON_SOUL_EQUIP_SLOT_START && cell < DRAGON_SOUL_EQUIP_SLOT_END));
	}
	bool IsBeltInventoryPosition() const
	{
		return ((INVENTORY == window_type) && (cell >= BELT_INVENTORY_SLOT_START && cell < BELT_INVENTORY_SLOT_END));
	}
	bool IsDefaultInventoryPosition() const
	{
		return ((INVENTORY == window_type) && (cell < INVENTORY_MAX_NUM));
	}
#ifdef __SWITCHBOT__
	bool IsSwitchbotPosition() const
	{
		return SWITCHBOT == window_type && cell < SWITCHBOT_SLOT_COUNT;
	}
#endif
	bool operator==(const struct SItemPos& rhs) const
	{
		return (window_type == rhs.window_type) && (cell == rhs.cell);
	}
	bool operator<(const struct SItemPos& rhs) const
	{
		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));
	}
} TItemPos;

const TItemPos NPOS (RESERVED_WINDOW, WORD_MAX);

#ifdef __SKILL_COLOR__
namespace ESkillColorLength
{
	enum ESkillColorLength
	{
		MAX_SKILL_COUNT = 6,
		MAX_EFFECT_COUNT = 5,
#ifdef __WOLFMAN_CHARACTER__
		MAX_BUFF_COUNT = 6,
#else
		MAX_BUFF_COUNT = 5,
#endif
		BUFF_BEGIN = MAX_SKILL_COUNT,
	};
}
#endif

typedef struct SItemPosEx
{
	TItemPos pos;
	int id;
} TItemPosEx;

enum EVarTime
{
	VAR_TIME_NONE,
#ifdef __CHANNEL_CHANGER__
	VAR_TIME_CHANNEL_CHANGE,
#endif
#ifdef __SKILLBOOK_SYSTEM__
	VAR_TIME_READ_SKILLBOOK,
#endif
#ifdef __SOULSTONE_SYSTEM__
	VAR_TIME_READ_SOULSTONE,
#endif
#ifdef __GROWTH_PET_SYSTEM__
	VAR_TIME_PET_ACTION,
#endif
#ifdef __GROWTH_MOUNT_SYSTEM__
	VAR_TIME_MOUNT_ACTION,
#endif
#ifdef __ITEM_EVOLUTION__
	VAR_TIME_REFINE_RARITY,
#endif
#ifdef __INGAME_MALL__
	VAR_TIME_INGAME_MALL,
#endif
#ifdef __REMOVE_SKILL_AFFECT__
	VAR_TIME_REMOVE_SKILL_AFFECT,
#endif
#ifdef __SPLIT_ITEMS__
	VAR_TIME_SPLIT_ITEMS,
#endif
#ifdef __BIOLOG_SYSTEM__
	VAR_TIME_BIOLOG,
#endif
#ifdef __INVENTORY_SORT__
	VAR_TIME_SORT_INVENTORY,
#endif
	VAR_TIME_MAX_NUM,
};

enum EVarValue
{
	VAR_VAL_NONE,
#ifdef __CHANNEL_CHANGER__
	VAR_VAL_CHANNEL_CHANGE,
#endif
#ifdef __SKILLBOOK_SYSTEM__
	VAR_VAL_READ_SKILLBOOK,
#endif
#ifdef __SOULSTONE_SYSTEM__
	VAR_VAL_READ_SOULSTONE,
#endif
#ifdef __GROWTH_PET_SYSTEM__
	VAR_VAL_PET_ACTION,
#endif
#ifdef __GROWTH_MOUNT_SYSTEM__
	VAR_VAL_MOUNT_ACTION,
#endif
#ifdef __ITEM_EVOLUTION__
	VAR_VAL_REFINE_RARITY,
#endif
#ifdef __INGAME_MALL__
	VAR_VAL_INGAME_MALL,
#endif
#ifdef __REMOVE_SKILL_AFFECT__
	VAR_VAL_REMOVE_SKILL_AFFECT,
#endif
#ifdef __SPLIT_ITEMS__
	VAR_VAL_SPLIT_ITEMS,
#endif
#ifdef __BIOLOG_SYSTEM__
	VAR_VAL_BIOLOG,
#endif
#ifdef __INVENTORY_SORT__
	VAR_VAL_SORT_INVENTORY,
#endif
	VAR_VAL_MAX_NUM,
};

enum EVarDisabled
{
	VAR_SAFEBOX			= (1 << 0),
	VAR_EXCHANGE		= (1 << 1),
	VAR_MYSHOP			= (1 << 2),
	VAR_REFINE			= (1 << 3),
	VAR_ACCE			= (1 << 4),
	VAR_CHANGELOOK		= (1 << 5),
	VAR_OFFLINESHOP		= (1 << 6),
};

#ifdef __PENDANT_SYSTEM__
enum EElementTypes
{
	ELEMENT_TYPE_FIRE,
	ELEMENT_TYPE_ICE,
	ELEMENT_TYPE_EARTH,
	ELEMENT_TYPE_DARK,
	ELEMENT_TYPE_WIND,
	ELEMENT_TYPE_ELECT,
	ELEMENT_TYPE_MAX,
};
#endif

#ifdef __BATTLE_PASS_SYSTEM__
enum EBattlePassInfo
{
	MISSION_REWARD_COUNT = 3,
};

enum EBattlePassType
{
	MISSION_TYPE_NONE,

	MONSTER_KILL,
	STONE_KILL,
	BOSS_KILL,
	BETA_BOSS_KILL,
	PLAYER_KILL,

	MONSTER_DAMAGE,
	PLAYER_DAMAGE,

	USE_ITEM,
	SELL_ITEM,
	CRAFT_ITEM,
	REFINE_ITEM,
	DESTROY_ITEM,
	COLLECT_ITEM,

	FRY_FISH,
	CATCH_FISH,

	SPENT_YANG,
	FARM_YANG,

	COMPLETE_LOW_DUNGEON,
	COMPLETE_HIGH_DUNGEON,
	COMPLETE_MINIGAME,

	SHOUT,
	PLAYTIME,

	METIN_KILL1,METIN_KILL2,METIN_KILL3,METIN_KILL4,METIN_KILL5,METIN_KILL6,METIN_KILL7,METIN_KILL8,METIN_KILL9,METIN_KILL10,METIN_KILL11,METIN_KILL12,
	METIN_KILL13,METIN_KILL14,METIN_KILL15,METIN_KILL16,METIN_KILL17,METIN_KILL18,METIN_KILL19,METIN_KILL20,METIN_KILL21,METIN_KILL22,METIN_KILL23,
	METIN_KILL24,METIN_KILL25,METIN_KILL26,METIN_KILL27,METIN_KILL28,METIN_KILL29,METIN_KILL30,METIN_KILL31,METIN_KILL32,METIN_KILL33,METIN_KILL34,
	METIN_KILL35,METIN_KILL36,METIN_KILL37,METIN_KILL38,METIN_KILL39,METIN_KILL40,METIN_KILL41,METIN_KILL42,METIN_KILL43,METIN_KILL44,METIN_KILL45,
	METIN_KILL46,METIN_KILL47,METIN_KILL48,METIN_KILL49,METIN_KILL50,

	DUNGEON_DONE1,DUNGEON_DONE2,DUNGEON_DONE3,DUNGEON_DONE4,DUNGEON_DONE5,DUNGEON_DONE6,DUNGEON_DONE7,DUNGEON_DONE8,DUNGEON_DONE9,DUNGEON_DONE10,
	DUNGEON_DONE11,DUNGEON_DONE12,DUNGEON_DONE13,DUNGEON_DONE14,DUNGEON_DONE15,DUNGEON_DONE16,DUNGEON_DONE17,DUNGEON_DONE18,DUNGEON_DONE19,DUNGEON_DONE20,
	DUNGEON_DONE21,DUNGEON_DONE22,DUNGEON_DONE23,DUNGEON_DONE24,DUNGEON_DONE25,DUNGEON_DONE26,DUNGEON_DONE27,DUNGEON_DONE28,DUNGEON_DONE29,DUNGEON_DONE30,

	MONSTER_KILL1,MONSTER_KILL2,MONSTER_KILL3,MONSTER_KILL4,MONSTER_KILL5,MONSTER_KILL6,MONSTER_KILL7,MONSTER_KILL8,MONSTER_KILL9,MONSTER_KILL10,
	MONSTER_KILL11,MONSTER_KILL12,MONSTER_KILL13,MONSTER_KILL14,MONSTER_KILL15,MONSTER_KILL16,MONSTER_KILL17,MONSTER_KILL18,MONSTER_KILL19,MONSTER_KILL20,
	MONSTER_KILL21,MONSTER_KILL22,MONSTER_KILL23,MONSTER_KILL24,MONSTER_KILL25,MONSTER_KILL26,MONSTER_KILL27,MONSTER_KILL28,MONSTER_KILL29,MONSTER_KILL30,

	PLAY_TIME1,PLAY_TIME2,PLAY_TIME3,PLAY_TIME4,PLAY_TIME5,PLAY_TIME6,PLAY_TIME7,PLAY_TIME8,PLAY_TIME9,PLAY_TIME10,
	PLAY_TIME11,PLAY_TIME12,PLAY_TIME13,PLAY_TIME14,PLAY_TIME15,PLAY_TIME16,PLAY_TIME17,PLAY_TIME18,PLAY_TIME19,PLAY_TIME20,
	PLAY_TIME21,PLAY_TIME22,PLAY_TIME23,PLAY_TIME24,PLAY_TIME25,PLAY_TIME26,PLAY_TIME27,PLAY_TIME28,PLAY_TIME29,PLAY_TIME30,

	FISH_DESTROY1,FISH_DESTROY2,FISH_DESTROY3,FISH_DESTROY4,FISH_DESTROY5,FISH_DESTROY6,FISH_DESTROY7,FISH_DESTROY8,FISH_DESTROY9,FISH_DESTROY10,FISH_DESTROY11,FISH_DESTROY12,
	FISH_DESTROY13,FISH_DESTROY14,FISH_DESTROY15,FISH_DESTROY16,FISH_DESTROY17,FISH_DESTROY18,FISH_DESTROY19,FISH_DESTROY20,FISH_DESTROY21,FISH_DESTROY22,FISH_DESTROY23,
	FISH_DESTROY24,FISH_DESTROY25,FISH_DESTROY26,FISH_DESTROY27,FISH_DESTROY28,FISH_DESTROY29,FISH_DESTROY30,FISH_DESTROY31,FISH_DESTROY32,FISH_DESTROY33,FISH_DESTROY34,
	FISH_DESTROY35,FISH_DESTROY36,FISH_DESTROY37,FISH_DESTROY38,FISH_DESTROY39,FISH_DESTROY40,FISH_DESTROY41,FISH_DESTROY42,FISH_DESTROY43,FISH_DESTROY44,FISH_DESTROY45,
	FISH_DESTROY46,FISH_DESTROY47,FISH_DESTROY48,FISH_DESTROY49,FISH_DESTROY50,

	KAFA_DESTROY1,KAFA_DESTROY2,KAFA_DESTROY3,KAFA_DESTROY4,KAFA_DESTROY5,KAFA_DESTROY6,KAFA_DESTROY7,KAFA_DESTROY8,KAFA_DESTROY9,KAFA_DESTROY10,

	SEND_SHOUT1,SEND_SHOUT2,SEND_SHOUT3,SEND_SHOUT4,SEND_SHOUT5,SEND_SHOUT6,SEND_SHOUT7,SEND_SHOUT8,SEND_SHOUT9,SEND_SHOUT10,
	SEND_SHOUT11,SEND_SHOUT12,SEND_SHOUT13,SEND_SHOUT14,SEND_SHOUT15,SEND_SHOUT16,SEND_SHOUT17,SEND_SHOUT18,SEND_SHOUT19,SEND_SHOUT20,
	SEND_SHOUT21,SEND_SHOUT22,SEND_SHOUT23,SEND_SHOUT24,SEND_SHOUT25,SEND_SHOUT26,SEND_SHOUT27,SEND_SHOUT28,SEND_SHOUT29,SEND_SHOUT30,SEND_SHOUT31,

	MISSION_TYPE_MAX,
};
#endif

#pragma pack(pop)