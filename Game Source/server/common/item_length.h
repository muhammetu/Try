#pragma once
#include "service.h"

enum EItemMisc
{
	ITEM_NAME_MAX_LEN			= 64,
	ITEM_VALUES_MAX_NUM			= 6,
	ITEM_LIMIT_MAX_NUM			= 2,
	ITEM_APPLY_MAX_NUM			= 3,
#ifdef __ITEM_EXTRA_SOCKET__
	ITEM_SOCKET_MAX_NUM			= 4,
#else
	ITEM_SOCKET_MAX_NUM			= 3,
#endif
#ifdef __ITEM_COUNT_LIMIT__
	ITEM_MAX_COUNT				= 10000000,
#else
	ITEM_MAX_COUNT				= 200,
#endif
	ITEM_ATTRIBUTE_NORM_NUM		= 5,
	ITEM_ATTRIBUTE_RARE_NUM		= 2,
	ITEM_ATTRIBUTE_NORM_START	= 0,
	ITEM_ATTRIBUTE_NORM_END		= ITEM_ATTRIBUTE_NORM_START + ITEM_ATTRIBUTE_NORM_NUM,
	ITEM_ATTRIBUTE_RARE_START	= ITEM_ATTRIBUTE_NORM_END,
	ITEM_ATTRIBUTE_RARE_END		= ITEM_ATTRIBUTE_RARE_START + ITEM_ATTRIBUTE_RARE_NUM,
	ITEM_ATTRIBUTE_MAX_NUM		= 7, // 7
	ITEM_ATTRIBUTE_MAX_LEVEL	= 5,
	REFINE_MATERIAL_MAX_NUM		= 10,
	ITEM_ELK_VNUM				= 50026,
#ifdef __COSTUME_ATTR_SWITCH__
	COSTUME_ATTRIBUTE_MAX_NUM	= 3,
#endif
#ifdef __SWITCHBOT__
	MAX_NORM_ATTR_NUM			= ITEM_ATTRIBUTE_NORM_NUM,
	MAX_RARE_ATTR_NUM			= ITEM_ATTRIBUTE_RARE_NUM,
#endif
};

const BYTE ITEM_SOCKET_REMAIN_SEC = 0;

enum EItemValueIdice
{
	ITEM_VALUE_DRAGON_SOUL_POLL_OUT_BONUS_IDX = 0,
	ITEM_VALUE_CHARGING_AMOUNT_IDX = 0,
	ITEM_VALUE_SECONDARY_COIN_UNIT_IDX = 0,
};
enum EItemDragonSoulSockets
{
	ITEM_SOCKET_DRAGON_SOUL_ACTIVE_IDX = 2,
	ITEM_SOCKET_CHARGING_AMOUNT_IDX = 2,
};
enum EItemUniqueSockets
{
	ITEM_SOCKET_UNIQUE_SAVE_TIME = 1,
	ITEM_SOCKET_UNIQUE_REMAIN_TIME = 2
};

enum EItemTypes
{
    ITEM_NONE,
    ITEM_WEAPON,
    ITEM_ARMOR,
    ITEM_USE,
    ITEM_AUTOUSE,
    ITEM_MATERIAL,
    ITEM_SPECIAL,
    ITEM_TOOL,
    ITEM_LOTTERY,
    ITEM_ELK,
    ITEM_METIN,
    ITEM_CONTAINER,
    ITEM_FISH,
    ITEM_ROD,
    ITEM_RESOURCE,
    ITEM_CAMPFIRE,
    ITEM_UNIQUE,
    ITEM_SKILLBOOK,
    ITEM_QUEST,
    ITEM_POLYMORPH,
    ITEM_TREASURE_BOX,
    ITEM_TREASURE_KEY,
    ITEM_SKILLFORGET,
    ITEM_GIFTBOX,
    ITEM_PICK,
    ITEM_HAIR,
    ITEM_TOTEM,
	ITEM_BLEND,
	ITEM_COSTUME,
	ITEM_DS,
	ITEM_SPECIAL_DS,
	ITEM_EXTRACT,
	ITEM_SECONDARY_COIN,
	ITEM_RING,
	ITEM_BELT,
	ITEM_PET,
	ITEM_MEDIUM,
	ITEM_GACHA,
	ITEM_SOUL,
#ifdef __SHINING_ITEM_SYSTEM__
	ITEM_SHINING,
#endif
#ifdef __CAKRA_ITEM_SYSTEM__
	ITEM_CAKRA,
#endif
#ifdef __SEBNEM_ITEM_SYSTEM__
	ITEM_SEBNEM,
#endif
};

enum EMetinSubTypes
{
	METIN_NORMAL,
	METIN_GOLD,
};

enum EWeaponSubTypes
{
	WEAPON_SWORD,
	WEAPON_DAGGER,
	WEAPON_BOW,
	WEAPON_TWO_HANDED,
	WEAPON_BELL,
	WEAPON_FAN,
	WEAPON_ARROW,
	WEAPON_MOUNT_SPEAR,
	WEAPON_CLAW,
	WEAPON_QUIVER,
	WEAPON_BOUQUET,
	WEAPON_NUM_TYPES,
};

enum EArmorSubTypes
{
	ARMOR_BODY,
	ARMOR_HEAD,
	ARMOR_SHIELD,
	ARMOR_WRIST,
	ARMOR_FOOTS,
	ARMOR_NECK,
	ARMOR_EAR,
	ARMOR_PENDANT,
	ARMOR_NUM_TYPES
};

enum ECostumeSubTypes
{
	COSTUME_BODY = ARMOR_BODY,
	COSTUME_HAIR = ARMOR_HEAD,
#ifdef __MOUNT_COSTUME_SYSTEM__
	COSTUME_MOUNT	= 2,
#endif
#ifdef __ACCE_SYSTEM__
	COSTUME_ACCE	= 3,
#endif
#ifdef __WEAPON_COSTUME_SYSTEM__
	COSTUME_WEAPON	= 4,
#endif
#ifdef __AURA_COSTUME_SYSTEM__
	COSTUME_AURA	= 5,
#endif
	COSTUME_NUM_TYPES,
};

enum EDragonSoulSubType
{
	DS_SLOT1,
	DS_SLOT2,
	DS_SLOT3,
	DS_SLOT4,
	DS_SLOT5,
	DS_SLOT6,
	DS_SLOT_MAX,
};

#ifdef __ACCE_SYSTEM__
enum EAcceInfo
{
	ACCE_GRADE_VALUE_FIELD = 0,
	ACCE_ABSORPTION_SOCKET = 0,
	ACCE_ABSORBED_SOCKET = 1,
	ACCE_GRADE_1_ABS = 1,
	ACCE_GRADE_2_ABS = 5,
	ACCE_GRADE_3_ABS = 10,
	ACCE_GRADE_4_ABS_MIN = 11,
	ACCE_GRADE_4_ABS_MAX = 1000,
	ACCE_GRADE_4_ABS_MAX_COMB = 19,
	ACCE_GRADE_4_ABS_RANGE = 5,
	ACCE_EFFECT_FROM_ABS = 19,
	ACCE_CLEAN_ATTR_VALUE0 = 7,
	ACCE_WINDOW_MAX_MATERIALS = 2,
	ACCE_GRADE_1_PRICE = 100000,
	ACCE_GRADE_2_PRICE = 200000,
	ACCE_GRADE_3_PRICE = 300000,
	ACCE_GRADE_4_PRICE = 500000,
	ACCE_COMBINE_GRADE_1 = 75,
	ACCE_COMBINE_GRADE_2 = 55,
	ACCE_COMBINE_GRADE_3 = 45,
	ACCE_COMBINE_GRADE_4 = 25,
	#ifdef __ACCE_25ABS_ITEMS__
	ACCE_GRADE_4_ABS_MIN_ABS = 11,
	ACCE_GRADE_NEW_ABS_25 = 250,
	#endif
};
#endif

enum EDragonSoulGradeTypes
{
	DRAGON_SOUL_GRADE_NORMAL,
	DRAGON_SOUL_GRADE_BRILLIANT,
	DRAGON_SOUL_GRADE_RARE,
	DRAGON_SOUL_GRADE_ANCIENT,
	DRAGON_SOUL_GRADE_LEGENDARY,
#ifdef __DS_GRADE_MYTH__
	DRAGON_SOUL_GRADE_MYTH,
#endif
#ifdef __DS_GRADE_EPIC__
	DRAGON_SOUL_GRADE_EPIC,
#endif
#ifdef __DS_GRADE_GODLIKE__
	DRAGON_SOUL_GRADE_GODLIKE,
#endif
	DRAGON_SOUL_GRADE_MAX,

};

enum EDragonSoulStepTypes
{
	DRAGON_SOUL_STEP_LOWEST,
	DRAGON_SOUL_STEP_LOW,
	DRAGON_SOUL_STEP_MID,
	DRAGON_SOUL_STEP_HIGH,
	DRAGON_SOUL_STEP_HIGHEST,
#ifdef ENABLE_NEW_DRAGON_SOUL_SINIF
	DRAGON_SOUL_STEP_NEW1,
	DRAGON_SOUL_STEP_NEW2,
	DRAGON_SOUL_STEP_NEW3,
	DRAGON_SOUL_STEP_NEW4,
	DRAGON_SOUL_STEP_NEW5,
#endif
	DRAGON_SOUL_STEP_MAX,
};
#define DRAGON_SOUL_STRENGTH_MAX 7

enum EDSInventoryMaxNum
{
	DRAGON_SOUL_INVENTORY_MAX_NUM = DS_SLOT_MAX * DRAGON_SOUL_GRADE_MAX * DRAGON_SOUL_BOX_SIZE,
};

enum EFishSubTypes
{
	FISH_ALIVE,
	FISH_DEAD,
};

enum EResourceSubTypes
{
	RESOURCE_FISHBONE,
	RESOURCE_WATERSTONEPIECE,
	RESOURCE_WATERSTONE,
	RESOURCE_BLOOD_PEARL,
	RESOURCE_BLUE_PEARL,
	RESOURCE_WHITE_PEARL,
	RESOURCE_BUCKET,
	RESOURCE_CRYSTAL,
	RESOURCE_GEM,
	RESOURCE_STONE,
	RESOURCE_METIN,
	RESOURCE_ORE,
};

enum EUniqueSubTypes
{
	UNIQUE_NONE,
	UNIQUE_BOOK,
	UNIQUE_SPECIAL_RIDE,
	UNIQUE_SPECIAL_MOUNT_RIDE,
};

enum EUseSubTypes
{
	USE_POTION,					// 0
	USE_TALISMAN,
	USE_TUNING,
	USE_MOVE,
	USE_TREASURE_BOX,
	USE_MONEYBAG,
	USE_BAIT,
	USE_ABILITY_UP,
	USE_AFFECT,
	USE_CREATE_STONE,
	USE_SPECIAL,				// 10
	USE_POTION_NODELAY,
	USE_CLEAR,
	USE_INVISIBILITY,
	USE_DETACHMENT,
	USE_BUCKET,
	USE_POTION_CONTINUE,
	USE_CLEAN_SOCKET,
	USE_CHANGE_ATTRIBUTE,
	USE_ADD_ATTRIBUTE,
	USE_ADD_ACCESSORY_SOCKET,	// 20
	USE_PUT_INTO_ACCESSORY_SOCKET,
	USE_ADD_ATTRIBUTE2,
	USE_RECIPE,
	USE_CHANGE_ATTRIBUTE2,
	USE_TIME_CHARGE_PER,
	USE_TIME_CHARGE_FIX,				// 28
	USE_PUT_INTO_BELT_SOCKET,
	USE_PUT_INTO_RING_SOCKET,
	USE_CHANGE_COSTUME_ATTR,			// 31
	USE_RESET_COSTUME_ATTR,				// 32
	USE_SELECT_ATTRIBUTE,
	USE_FLOWER,
	USE_PET,
#ifdef __PENDANT_ATTR__
	USE_ADD_PENDANT_ATTRIBUTE,
	USE_ADD_PENDANT_FIVE_ATTRIBUTE,
	USE_CHANGE_PENDANT_ATTRIBUTE,
#endif
#ifdef __AURA_COSTUME_SYSTEM__
	USE_ADD_AURA_ATTRIBUTE,
	USE_ADD_AURA_FIVE_ATTRIBUTE,
	USE_CHANGE_AURA_ATTRIBUTE,
#endif
#ifdef __MOUNT_COSTUME_SYSTEM__
	USE_ADD_MOUNT_ATTRIBUTE,
	USE_CHANGE_MOUNT_ATTRIBUTE,
#endif
#ifdef __WEAPON_COSTUME_SYSTEM__
	USE_ADD_WEAPON_COSTUME_ATTRIBUTE,
	USE_CHANGE_WEAPON_COSTUME_ATTRIBUTE,
#endif
#ifdef __MARTY_BELT_INVENTORY__
	USE_ADD_BELT_ATTRIBUTE,
	USE_CHANGE_BELT_ATTRIBUTE,
#endif
#ifdef __HAIR_COSTUME_ATTRIBUTE__
	USE_ADD_HAIR_COSTUME_ATTRIBUTE,
	USE_CHANGE_HAIR_COSTUME_ATTRIBUTE,
#endif
#ifdef __BODY_COSTUME_ATTRIBUTE__
	USE_ADD_BODY_COSTUME_ATTRIBUTE,
	USE_CHANGE_BODY_COSTUME_ATTRIBUTE,
#endif
#ifdef __SHINING_ITEM_SYSTEM__
	USE_ADD_ACCE_SHINING_ATTRIBUTE,
	USE_CHANGE_ACCE_SHINING_ATTRIBUTE,
	USE_ADD_SOUL_SHINING_ATTRIBUTE,
	USE_ADD_SOUL_SHINING_FIVE_ATTRIBUTE,
	USE_CHANGE_SOUL_SHINING_ATTRIBUTE,
#endif
#ifdef __MOUNT_COSTUME_SYSTEM__
	USE_ADD_FIVE_MOUNT_ATTRIBUTE,
#endif
#ifdef __WEAPON_COSTUME_SYSTEM__
	USE_ADD_FIVE_WEAPON_COSTUME_ATTRIBUTE,
#endif
#ifdef __MARTY_BELT_INVENTORY__
	USE_ADD_FIVE_BELT_ATTRIBUTE,
#endif
#ifdef __HAIR_COSTUME_ATTRIBUTE__
	USE_ADD_FIVE_HAIR_COSTUME_ATTRIBUTE,
#endif
#ifdef __BODY_COSTUME_ATTRIBUTE__
	USE_ADD_FIVE_BODY_COSTUME_ATTRIBUTE,
#endif
#ifdef __SHINING_ITEM_SYSTEM__
	USE_ADD_FIVE_ACCE_SHINING_ATTRIBUTE,
#endif
#ifdef __CAKRA_ITEM_SYSTEM__
	USE_ADD_CAKRA_ITEM_ATTRIBUTE,
	USE_ADD_FIVE_CAKRA_ITEM_ATTRIBUTE,
	USE_CHANGE_CAKRA_ITEM_ATTRIBUTE,
#endif
#ifdef __PET_SYSTEM_PROTO__
	USE_ADD_PET_ITEM_ATTRIBUTE,
	USE_ADD_FIVE_PET_ITEM_ATTRIBUTE,
	USE_CHANGE_PET_ITEM_ATTRIBUTE,
#endif
#ifdef __SEBNEM_ITEM_SYSTEM__
	USE_ADD_SEBNEM_ITEM_ATTRIBUTE,
	USE_ADD_FIVE_SEBNEM_ITEM_ATTRIBUTE,
	USE_CHANGE_SEBNEM_ITEM_ATTRIBUTE,
#endif
	USE_UNKNOWN_TYPE,
};

enum EExtractSubTypes
{
	EXTRACT_DRAGON_SOUL,
	EXTRACT_DRAGON_HEART,
};

#ifdef __BLEND_ITEM_REWORK__
enum EBlendSubType
{
	NORMAL_BLEND,
	INFINITY_BLEND,
};
#endif

enum EAutoUseSubTypes
{
	AUTOUSE_POTION,
	AUTOUSE_ABILITY_UP,
	AUTOUSE_BOMB,
	AUTOUSE_GOLD,
	AUTOUSE_MONEYBAG,
	AUTOUSE_TREASURE_BOX
};

enum EMaterialSubTypes
{
	MATERIAL_LEATHER,
	MATERIAL_BLOOD,
	MATERIAL_ROOT,
	MATERIAL_NEEDLE,
	MATERIAL_JEWEL,
	MATERIAL_DS_REFINE_NORMAL,
	MATERIAL_DS_REFINE_BLESSED,
	MATERIAL_DS_REFINE_HOLLY,
#ifdef __DSS_REFINE_ITEMS__
	MATERIAL_DS_REFINE_1,
	MATERIAL_DS_REFINE_2,
	MATERIAL_DS_REFINE_3,
	MATERIAL_DS_REFINE_4,
	MATERIAL_DS_REFINE_5,
#endif
};

enum ESpecialSubTypes
{
	SPECIAL_MAP,
	SPECIAL_KEY,
	SPECIAL_DOC,
	SPECIAL_SPIRIT,
};

enum EToolSubTypes
{
	TOOL_FISHING_ROD
};

enum ELotterySubTypes
{
	LOTTERY_TICKET,
	LOTTERY_INSTANT
};

enum EItemFlag
{
	ITEM_FLAG_REFINEABLE		= (1 << 0),
	ITEM_FLAG_SAVE			= (1 << 1),
	ITEM_FLAG_STACKABLE		= (1 << 2),
	ITEM_FLAG_COUNT_PER_1GOLD	= (1 << 3),
	ITEM_FLAG_SLOW_QUERY		= (1 << 4),
	ITEM_FLAG_RARE = (1 << 5),
	ITEM_FLAG_UNIQUE		= (1 << 6),
	ITEM_FLAG_MAKECOUNT		= (1 << 7),
	ITEM_FLAG_IRREMOVABLE		= (1 << 8),
	ITEM_FLAG_CONFIRM_WHEN_USE	= (1 << 9),
	ITEM_FLAG_QUEST_USE		= (1 << 10),
	ITEM_FLAG_QUEST_USE_MULTIPLE	= (1 << 11),
	ITEM_FLAG_QUEST_GIVE		= (1 << 12),
	ITEM_FLAG_LOG			= (1 << 13),
	ITEM_FLAG_APPLICABLE		= (1 << 14),
	ITEM_FLAG_RARE_ABILITY = (1 << 15),
	ITEM_FLAG_LOG_SPECIAL = (1 << 16),
};

enum EItemAntiFlag
{
	ITEM_ANTIFLAG_FEMALE	= (1 << 0),
	ITEM_ANTIFLAG_MALE		= (1 << 1),
	ITEM_ANTIFLAG_WARRIOR	= (1 << 2),
	ITEM_ANTIFLAG_ASSASSIN	= (1 << 3),
	ITEM_ANTIFLAG_SURA		= (1 << 4),
	ITEM_ANTIFLAG_SHAMAN	= (1 << 5),
	ITEM_ANTIFLAG_GET		= (1 << 6),
	ITEM_ANTIFLAG_DROP		= (1 << 7),
	ITEM_ANTIFLAG_SELL		= (1 << 8),
	ITEM_ANTIFLAG_EMPIRE_A	= (1 << 9),
	ITEM_ANTIFLAG_EMPIRE_B	= (1 << 10),
	ITEM_ANTIFLAG_EMPIRE_C	= (1 << 11),
	ITEM_ANTIFLAG_SAVE		= (1 << 12),
	ITEM_ANTIFLAG_GIVE		= (1 << 13),
	ITEM_ANTIFLAG_PKDROP	= (1 << 14),
	ITEM_ANTIFLAG_STACK		= (1 << 15),
	ITEM_ANTIFLAG_MYSHOP	= (1 << 16),
	ITEM_ANTIFLAG_SAFEBOX	= (1 << 17),
	ITEM_ANTIFLAG_WOLFMAN	= (1 << 18),
#ifdef __SLOT_MARKING__
	ITEM_ANTIFLAG_QUICKSLOT = (1 << 19),
	ITEM_ANTIFLAG_PET = (1 << 20),
	ITEM_ANTIFLAG_CHANGELOOK = (1 << 21),
	ITEM_ANTIFLAG_REINFORCE = (1 << 22),
	ITEM_ANTIFLAG_ENCHANT = (1 << 23),
	ITEM_ANTIFLAG_ENERGY = (1 << 24),
	ITEM_ANTIFLAG_PETFEED = (1 << 25),
	ITEM_ANTIFLAG_APPLY = (1 << 26),
	ITEM_ANTIFLAG_ACCE = (1 << 27),
	ITEM_ANTIFLAG_MAIL = (1 << 28),
	ITEM_ANTIFLAG_AURA = (1 << 29),
	ITEM_ANTIFLAG_FORCE_ALL = (1 << 30),
	ITEM_ANTIFLAG_COMB = (1 << 31),
#endif
};

enum EItemWearableFlag
{
	WEARABLE_BODY	= (1 << 0),
	WEARABLE_HEAD	= (1 << 1),
	WEARABLE_FOOTS	= (1 << 2),
	WEARABLE_WRIST	= (1 << 3),
	WEARABLE_WEAPON	= (1 << 4),
	WEARABLE_NECK	= (1 << 5),
	WEARABLE_EAR	= (1 << 6),
	WEARABLE_UNIQUE	= (1 << 7),
	WEARABLE_SHIELD	= (1 << 8),
	WEARABLE_ARROW	= (1 << 9),
	WEARABLE_ABILITY = (1 << 10),
	WEARABLE_COSTUME_BODY = (1 << 11),
	WEARABLE_COSTUME_HAIR = (1 << 12),
	WEARABLE_COSTUME_MOUNT = (1 << 13),
	WEARABLE_COSTUME_ACCE = (1 << 14),
	WEARABLE_COSTUME_WEAPON = (1 << 15),
	WEARABLE_PENDANT = (1 << 16),
#ifdef __AURA_COSTUME_SYSTEM__
	WEARABLE_COSTUME_AURA = (1 << 17),
#endif
#ifdef __PET_SYSTEM_PROTO__
	WEARABLE_PET = (1 << 18),
#endif
};

enum ELimitTypes
{
	LIMIT_NONE,
	LIMIT_LEVEL,
	LIMIT_STR,
	LIMIT_DEX,
	LIMIT_INT,
	LIMIT_CON,
	LIMIT_UNUSED,
	LIMIT_REAL_TIME,
	LIMIT_REAL_TIME_START_FIRST_USE,
	LIMIT_TIMER_BASED_ON_WEAR,
	LIMIT_MAX_NUM
};

enum EAttrAddonTypes
{
	ATTR_ADDON_NONE,
	// positive values are reserved for set
	ATTR_DAMAGE_ADDON = -1,
};

enum ERefineType
{
	REFINE_TYPE_NORMAL,
	REFINE_TYPE_NOT_USED1,
	REFINE_TYPE_SCROLL,
	REFINE_TYPE_HYUNIRON,
	REFINE_TYPE_MONEY_ONLY,
	REFINE_TYPE_MUSIN,
	REFINE_TYPE_BDRAGON,
#ifdef __REFINE_SCROLL__
	REFINE_TYPE_PLUS_SCROLL,
#endif
};

#ifdef __ITEM_EVOLUTION__
enum EEvolutionType
{
	WEAPON_EVOLUTION_TYPE_NONE,
	WEAPON_EVOLUTION_TYPE_FIRE,
	WEAPON_EVOLUTION_TYPE_ICE,
	WEAPON_EVOLUTION_TYPE_EARTH,
	WEAPON_EVOLUTION_TYPE_WIND,
	WEAPON_EVOLUTION_TYPE_DARK,
	WEAPON_EVOLUTION_TYPE_ELEC,
	WEAPON_EVOLUTION_TYPE_ALL,
	WEAPON_EVOLUTION_TYPE_HUMAN,
	WEAPON_EVOLUTION_TYPE_EX_FIRE,
	WEAPON_EVOLUTION_TYPE_EX_ICE,
	WEAPON_EVOLUTION_TYPE_EX_EARTH,
	WEAPON_EVOLUTION_TYPE_EX_WIND,
	WEAPON_EVOLUTION_TYPE_EX_DARK,
	WEAPON_EVOLUTION_TYPE_EX_ELEC,
	WEAPON_EVOLUTION_TYPE_EX_ALL,
};
#endif

#ifdef __SHINING_ITEM_SYSTEM__
enum EShiningSubTypes
{
	SHINING_WEAPON,
	SHINING_ARMOR,
	SHINING_SPECIAL,
	SHINING_SPECIAL2,
	SHINING_SPECIAL3,
	SHINING_WING,
};
#endif

#ifdef __CAKRA_ITEM_SYSTEM__
enum ECakraSubTypes
{
	CAKRA_ITEM_1,
	CAKRA_ITEM_2,
	CAKRA_ITEM_3,
	CAKRA_ITEM_4,
	CAKRA_ITEM_5,
	CAKRA_ITEM_6,
	CAKRA_ITEM_7,
	CAKRA_ITEM_8,
};
#endif

#ifdef __SEBNEM_ITEM_SYSTEM__
enum ESebnemSubTypes
{
	SEBNEM_ITEM_1,
	SEBNEM_ITEM_2,
	SEBNEM_ITEM_3,
	SEBNEM_ITEM_4,
	SEBNEM_ITEM_5,
	SEBNEM_ITEM_6,
};
#endif